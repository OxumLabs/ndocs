{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Neit! \ud83d\ude80","text":"<p>At Neit, we are not just writing code; we are revolutionizing the way developers approach programming! Designed with flexibility and power in mind, Neit stands out as a cutting-edge programming language that meets the diverse needs of modern developers, whether you're a seasoned pro or just starting out.</p>"},{"location":"#why-choose-neit","title":"\ud83c\udf1f Why Choose Neit?","text":"<p>Neit is more than just a programming language; it is a dynamic environment that empowers you to create innovative solutions. Imagine a world where coding is as enjoyable as playing a video game\u2014where your creativity can run wild! Here are some key features that make Neit a compelling choice:</p>"},{"location":"#1-customizable-syntax","title":"1. Customizable Syntax","text":"<p>With Neit, you have the freedom to define your own syntax! \ud83c\udf89 This unique capability allows you to create a programming style that resonates with your personal workflow. Whether you prefer high-level abstractions that simplify complex problems or low-level details that give you full control, Neit can adapt to your needs. Imagine being able to craft a language that feels just right for you\u2014this is possible thanks to the powerful NTune Engine!</p>"},{"location":"#2-the-amazing-ntune-engine","title":"2. The Amazing NTune Engine","text":"<p>Meet the NTune Engine\u2014your personal syntax sculptor! \ud83d\udee0\ufe0f This incredible tool allows you to declare your very own syntax for programming. At Oxum Labs, we encourage you to build grammar files and showcase them. Let the world know about your creativity! With NTune, you can create your very own Neit-distro language that fits your needs perfectly. Your imagination is the only limit!</p>"},{"location":"#3-speed-and-efficiency","title":"3. Speed and Efficiency","text":"<p>Neit is designed for performance. \u26a1 The compilation process is optimized to minimize wait times, making it an efficient choice for rapid development. Whether you are working on a small script to automate your daily tasks or a large application that could change the world, Neit provides the speed you need to keep your projects moving forward. Your code will be up and running in no time!</p>"},{"location":"#4-easy-to-learn","title":"4. Easy to Learn","text":"<p>One of Neit's standout features is its user-friendly nature. \ud83c\udf08 With clear syntax and straightforward concepts, beginners can quickly pick up the language, while experienced developers can appreciate its powerful capabilities. The learning curve is smooth, allowing you to focus on creating rather than struggling with complexities. Say goodbye to endless tutorials and hello to building amazing projects!</p>"},{"location":"#5-community-driven-development","title":"5. Community-Driven Development","text":"<p>We believe in the power of community. \ud83e\udd1d Neit is built with input from developers like you! We actively listen to feedback and incorporate suggestions to improve the language and its ecosystem. Join our vibrant community, share your ideas, and help us shape the future of Neit together. Your voice matters here!</p>"},{"location":"#6-comprehensive-documentation","title":"6. Comprehensive Documentation","text":"<p>Neit is backed by extensive documentation, providing clear guides, examples, and best practices. \ud83d\udcda Our goal is to ensure you have all the resources you need to get started and excel in your projects. Think of our documentation as your trusty guide, leading you through the wonderful world of Neit.</p>"},{"location":"#getting-started","title":"\ud83d\udcda Getting Started","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#neit-is-not-ready-for-production-use-and-is-still-in-development","title":"\u26a0\ufe0f Neit is not ready for production use and is still in development!","text":"<p>At current state neit doesn't have a stable installer and neitset is not ready to use as , again its not stable , so we encourage you to do the following :-</p>"},{"location":"#to-download-and-setup-neit","title":"To Download and setup Neit:","text":"<ul> <li> <p>On Linux:</p> </li> <li> <p>Download the Linux Zip File    Get it from the release section.</p> </li> <li> <p>Extract the Executable    Once downloaded, extract the contents of the zip file.</p> </li> <li> <p>Open Terminal in the Extracted Directory    Navigate to the directory where you extracted the files.</p> </li> <li> <p>Run the Following Commands    In the terminal, execute these commands:</p> </li> </ul> <p>```bash    # Make binary executable    sudo chmod +x ./neit</p> <p># Move binary to /usr/local/bin    sudo mv ./neit /usr/local/bin</p> <p># Now depending on your shell, reload it (or you can close all terminal instances and open them again to reload)    # This is for bash    source ~/.bashrc    ```</p> <ul> <li> <p>Ensure you have installed <code>clang</code> and <code>lld</code> on your system:</p> </li> <li> <p>Some common commands are:</p> <ul> <li>For Debian/Ubuntu:   <code>sudo apt install clang lld</code></li> <li>For CentOS/RHEL 8 or later:   <code>sudo dnf install clang lld</code></li> <li>For CentOS/RHEL 7:   <code>sudo yum install clang lld</code></li> <li>For Arch Linux:   <code>sudo pacman -S clang lld</code></li> <li>For openSUSE:   <code>sudo zypper install clang lld</code></li> <li>For Gentoo:   <code>sudo emerge dev-lang/clang</code></li> <li>For Alpine:   <code>sudo apk add clang lld</code></li> </ul> </li> <li> <p>On Windows:</p> </li> <li>Download and Install TDM-GCC.</li> <li>Run the installer and follow the prompts to install it.</li> <li>Download and install vc_redist</li> <li> <p>NOTE : You can also use <code>clang</code> as a compiler and linker for neit but then you need to manually set it on path (neit will auto detect clang and use it , btw clang provides more optimisation)</p> </li> </ul>"},{"location":"#setting-up-neit-in-path","title":"Setting Up Neit in PATH","text":"<ul> <li> <p>Using PowerShell:</p> </li> <li> <p>Open PowerShell as Administrator.</p> </li> <li>Run the following commands to add Neit to your system PATH (adjust paths as needed):</li> </ul> <p><code>[System.Environment]::SetEnvironmentVariable(\"Path\", $env:Path + \";C:\\Path\\To\\Neit\", [System.EnvironmentVariableTarget]::Machine)</code></p> <ul> <li> <p>Using Command Prompt:</p> </li> <li> <p>Open Command Prompt as Administrator.</p> </li> <li>Run the following command:</li> </ul> <p><code>cmd   setx Path \"%Path%;C:\\Path\\To\\Neit\" /M</code></p> <ul> <li>Using GUI:</li> <li>Right-click on <code>This PC</code> or <code>Computer</code> on your desktop or in File Explorer.</li> <li>Click on <code>Properties</code>.</li> <li>Select <code>Advanced system settings</code>.</li> <li>Click the <code>Environment Variables</code> button.</li> <li>In the <code>System variables</code> section, scroll to find the <code>Path</code> variable and select it.</li> <li>Click <code>Edit</code>, and then <code>New</code>.</li> <li>Add the paths for and Neit:<ul> <li><code>C:\\Path\\To\\Neit</code></li> </ul> </li> <li>Click <code>OK</code> to close all dialog boxes.</li> </ul> <p>Thank you for visiting the Neit documentation! Together, let's push the boundaries of what's possible in programming. \ud83c\udf1f</p> <p>\u201cProgramming isn\u2019t about what you know; it\u2019s about what you can figure out.\u201d \u2013 Chris Pine</p>"},{"location":"rules/","title":"Rules","text":"<p>Please note that when we refer to keywords, and we're not talking about the C programming language, we actually mean just \"words.\" In Neit, there are no special keywords that the language itself reserves, unlike languages such as C, which have predefined keywords like <code>if</code>, <code>while</code>, or <code>return</code>. This means Neit gives you more freedom when naming your variables and functions, as long as you avoid using C's reserved keywords.Since Neit relies on translating its code into C, it's important to avoid naming your variables or functions using words that are reserved in C (like <code>int</code>, <code>for</code>, <code>return</code>). If you do, it could cause conflicts and errors during compilation. To prevent these issues, a simple rule of thumb is to modify names that sound like C keywords. You can do this by adding an underscore (<code>_</code>) to the beginning or end of your variable or function names, or by adding additional characters. For example: - Instead of naming a function <code>return</code>, you could name it <code>return_</code> or <code>my_return</code>. Instead of using <code>int</code> as a variable name, you could use <code>int_value</code> or <code>my_int</code>. This ensures your code remains unique and doesn't clash with C's syntax.</p> <ol> <li>Code Cleanliness: To help make Neit code clean and maintainable.</li> <li>Safety Assurance: To ensure that your code remains safe and free from common pitfalls.</li> </ol> <p>By following these guidelines, you'll create code that is not only readable but also secure.</p>"},{"location":"rules/#code-cleanliness","title":"Code Cleanliness","text":"<p>Neit encourages a clean and readable code structure. Rules like the proper use of comments and curly braces help to maintain clarity in your codebase.</p>"},{"location":"rules/#importance-of-clean-code","title":"Importance of Clean Code","text":"<p>Clean code is vital for several reasons:</p> <ul> <li>Readability: Others (or you, in the future) should be able to understand the code easily.</li> <li>Maintainability: Clean code is easier to modify and extend without introducing errors.</li> <li>Collaboration: In a team setting, clear code helps everyone stay on the same page.</li> </ul> <p>To achieve clean code in Neit, adhere to the following practices:</p> <ul> <li>Use meaningful names for functions and variables.</li> <li>Keep functions focused and concise.</li> <li>Use comments to explain complex logic.</li> </ul>"},{"location":"rules/#safety-assurance","title":"Safety Assurance","text":"<p>The language's rules are designed to prevent common errors and ensure the safety of your code. Neit enforces specific patterns to make sure code execution is safe.</p>"},{"location":"rules/#common-pitfalls-in-programming","title":"Common Pitfalls in Programming","text":"<p>Many programming errors can lead to unexpected behavior, security vulnerabilities, or crashes. Examples include:</p> <ul> <li>Forgetting to initialize variables.</li> <li>Misusing control structures.</li> <li>Ignoring edge cases in conditions.</li> <li>Not freeing memory you manually allocated</li> </ul> <p>By following Neit's guidelines, you mitigate these risks and create robust applications.</p>"},{"location":"rules/#rules-and-guidelines","title":"Rules and Guidelines","text":""},{"location":"rules/#1-comments","title":"1. Comments","text":"<p>In Neit, comments are crucial for explaining the purpose of code sections. They should always be used to increase code readability.</p> <p>Comments in Neit start with the <code>#</code> symbol. Everything after the <code>#</code> on the line is treated as a comment and will not be executed.</p>"},{"location":"rules/#best-practices-for-writing-comments","title":"Best Practices for Writing Comments","text":"<ul> <li>Be Descriptive: Explain why something is done, not just what is done.</li> <li>Keep Them Up-to-Date: If the code changes, make sure the comments reflect those changes.</li> <li>Avoid Redundancy: Don't comment obvious statements; focus on complex logic instead.</li> </ul> <p>Example:</p> <pre><code># This function calculates the sum of two numbers\nfn add(a, b) {\n    return a + b\n}\n</code></pre>"},{"location":"rules/#2-curly-braces","title":"2. Curly Braces","text":"<p>Curly braces that start a code block in Neit need to be on the same line as the corresponding function, loop, or conditional statement.</p> <p>When you define a function, loop, or any control structure, the opening curly brace <code>{</code> must be on the same line as the declaration.</p>"},{"location":"rules/#why-this-matters","title":"Why This Matters","text":"<ul> <li>Consistency: Consistent formatting reduces cognitive load when reading code.</li> <li>Readability: Keeping braces on the same line improves the flow of reading.</li> </ul> <p>Example:</p> <pre><code># Here we are defining a function\nfn hi() {\n    # You can add your code here\n    print(\"Hello, World!\")\n}\n</code></pre>"},{"location":"rules/#3-conditional-statements","title":"3. Conditional Statements","text":"<p>Writing large <code>if</code> blocks can be tedious. Neit simplifies this with indexed conditions instead of traditional <code>else if</code> or <code>else</code> statements.</p> <p>In Neit, <code>if</code> statements use indexing to determine the flow of logic. Instead of using <code>else if</code>, you define multiple conditions within the <code>if</code> block.</p>"},{"location":"rules/#advantages-of-indexed-conditions","title":"Advantages of Indexed Conditions","text":"<ul> <li>Simplifies Logic: Makes it clear which conditions are being evaluated without nesting.</li> <li>Easier to Read: Flat structures are generally easier to understand than deeply nested conditions.</li> </ul> <p>Example:</p> <pre><code>if {\n    1-1 == 1 : no\n    1-1 == 2 : another_no\n    1-1 == 0 : yes\n}\n</code></pre> <p>You need to define each case using the <code>case</code> statement:</p> <pre><code>case no {\n    # Code for the \"no\" case\n    print(\"Condition was false.\")\n}\n</code></pre>"},{"location":"rules/#4-memory-management","title":"4. Memory Management","text":"<p>In C or C++ it is pretty easy to shoot yourself on the foot , XD not really but memory leaks and seg faults are bit of hassle isn't it? neit allows you to have Cs flexibility while maintaining safety</p> <p>In neit you can manually allocate memory for variables using the <code>make</code> keyword but then you will be forced to free that memory at some point using the <code>release</code> keyword you can allocate memory in the following way</p> <pre><code>make(name,\"joy\",5555)\n#makes a mutable variable called 'name' with type string(infered from \"\") and size 5555\n\nrelease name\n#releases the name variable thus freeing memory\n</code></pre> <p>One thing to keep in mind is amount of memory you allocate shall be more than 100 Each memory you allocate needs to be free-ed at some point in time in your code else need would refuse to compile or run</p>"},{"location":"rules/#examples","title":"Examples","text":""},{"location":"rules/#writing-comments","title":"Writing Comments","text":"<p>Comments should be used to explain sections of your code:</p> <pre><code># This is a comment explaining the purpose of the function\nfn example() { # Comment can be anywhere; code after # will be ignored\n    # This function performs a specific task\n    return 42\n}\n</code></pre>"},{"location":"rules/#using-curly-braces-correctly","title":"Using Curly Braces Correctly","text":"<p>Curly braces should always be on the same line as their associated statement:</p> <pre><code>fn add(a, b) {\n    return a + b\n}\n</code></pre>"},{"location":"rules/#working-with-if-statements","title":"Working with if Statements","text":"<p>Here\u2019s how you use indexed <code>if</code> conditions:</p> <pre><code>if {\n    a == b : equal\n    a &gt; b : greater\n    a &lt; b : lesser\n}\n</code></pre>"},{"location":"rules/#conclusion","title":"Conclusion","text":"<p>By following these rules and guidelines, you\u2019ll be able to write efficient, readable, and secure code in Neit. Happy coding!</p>"}]}